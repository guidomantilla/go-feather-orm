// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/feather-relational-datasource/types.go

// Package feather_relational_datasource is a generated GoMock package.
package feather_relational_datasource

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	feather_sql "github.com/guidomantilla/go-feather-sql/pkg/feather-sql"
)

// MockRelationalDatasourceContext is a mock of RelationalDatasourceContext interface.
type MockRelationalDatasourceContext struct {
	ctrl     *gomock.Controller
	recorder *MockRelationalDatasourceContextMockRecorder
}

// MockRelationalDatasourceContextMockRecorder is the mock recorder for MockRelationalDatasourceContext.
type MockRelationalDatasourceContextMockRecorder struct {
	mock *MockRelationalDatasourceContext
}

// NewMockRelationalDatasourceContext creates a new mock instance.
func NewMockRelationalDatasourceContext(ctrl *gomock.Controller) *MockRelationalDatasourceContext {
	mock := &MockRelationalDatasourceContext{ctrl: ctrl}
	mock.recorder = &MockRelationalDatasourceContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationalDatasourceContext) EXPECT() *MockRelationalDatasourceContextMockRecorder {
	return m.recorder
}

// GetDriverName mocks base method.
func (m *MockRelationalDatasourceContext) GetDriverName() feather_sql.DriverName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverName")
	ret0, _ := ret[0].(feather_sql.DriverName)
	return ret0
}

// GetDriverName indicates an expected call of GetDriverName.
func (mr *MockRelationalDatasourceContextMockRecorder) GetDriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverName", reflect.TypeOf((*MockRelationalDatasourceContext)(nil).GetDriverName))
}

// GetParamHolder mocks base method.
func (m *MockRelationalDatasourceContext) GetParamHolder() feather_sql.ParamHolder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParamHolder")
	ret0, _ := ret[0].(feather_sql.ParamHolder)
	return ret0
}

// GetParamHolder indicates an expected call of GetParamHolder.
func (mr *MockRelationalDatasourceContextMockRecorder) GetParamHolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParamHolder", reflect.TypeOf((*MockRelationalDatasourceContext)(nil).GetParamHolder))
}

// GetUrl mocks base method.
func (m *MockRelationalDatasourceContext) GetUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockRelationalDatasourceContextMockRecorder) GetUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockRelationalDatasourceContext)(nil).GetUrl))
}

// MockRelationalDatasource is a mock of RelationalDatasource interface.
type MockRelationalDatasource struct {
	ctrl     *gomock.Controller
	recorder *MockRelationalDatasourceMockRecorder
}

// MockRelationalDatasourceMockRecorder is the mock recorder for MockRelationalDatasource.
type MockRelationalDatasourceMockRecorder struct {
	mock *MockRelationalDatasource
}

// NewMockRelationalDatasource creates a new mock instance.
func NewMockRelationalDatasource(ctrl *gomock.Controller) *MockRelationalDatasource {
	mock := &MockRelationalDatasource{ctrl: ctrl}
	mock.recorder = &MockRelationalDatasourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationalDatasource) EXPECT() *MockRelationalDatasourceMockRecorder {
	return m.recorder
}

// GetDatabase mocks base method.
func (m *MockRelationalDatasource) GetDatabase() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockRelationalDatasourceMockRecorder) GetDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockRelationalDatasource)(nil).GetDatabase))
}
