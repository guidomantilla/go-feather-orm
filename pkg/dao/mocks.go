// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/dao/types.go

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrudDao is a mock of CrudDao interface.
type MockCrudDao struct {
	ctrl     *gomock.Controller
	recorder *MockCrudDaoMockRecorder
}

// MockCrudDaoMockRecorder is the mock recorder for MockCrudDao.
type MockCrudDaoMockRecorder struct {
	mock *MockCrudDao
}

// NewMockCrudDao creates a new mock instance.
func NewMockCrudDao(ctrl *gomock.Controller) *MockCrudDao {
	mock := &MockCrudDao{ctrl: ctrl}
	mock.recorder = &MockCrudDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrudDao) EXPECT() *MockCrudDaoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCrudDao) Delete(ctx context.Context, id any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCrudDaoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCrudDao)(nil).Delete), ctx, id)
}

// ExistsById mocks base method.
func (m *MockCrudDao) ExistsById(ctx context.Context, id any, args ...any) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExistsById", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsById indicates an expected call of ExistsById.
func (mr *MockCrudDaoMockRecorder) ExistsById(ctx, id interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsById", reflect.TypeOf((*MockCrudDao)(nil).ExistsById), varargs...)
}

// FindAll mocks base method.
func (m *MockCrudDao) FindAll(ctx context.Context, fn ReadFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCrudDaoMockRecorder) FindAll(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCrudDao)(nil).FindAll), ctx, fn)
}

// FindById mocks base method.
func (m *MockCrudDao) FindById(ctx context.Context, id any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindById", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockCrudDaoMockRecorder) FindById(ctx, id interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCrudDao)(nil).FindById), varargs...)
}

// Save mocks base method.
func (m *MockCrudDao) Save(ctx context.Context, args ...any) (*int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCrudDaoMockRecorder) Save(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCrudDao)(nil).Save), varargs...)
}

// Update mocks base method.
func (m *MockCrudDao) Update(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCrudDaoMockRecorder) Update(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCrudDao)(nil).Update), varargs...)
}
